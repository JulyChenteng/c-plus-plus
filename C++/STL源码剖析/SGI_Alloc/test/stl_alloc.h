#ifndef _STL_ALLOC_H
#define _STL_ALLOC_H

/*
* SGI STL两级配置器剖析
* SGI STL第一级配置器： a. allocate()直接使用 malloc()，deallocate()直接使用free()。
					  b. 模拟C++的set_new_handler()以及处理内存不足的状况。
* SGI STL第二级配置器： a.	维护16个自由链表(free lists),共128bytes, 负责16种小型区块的次配置能力。
					内存池(memory pool)以 malloc() 配置而得。
					  b. 如果需求区块大于128bytes，就转调用第一级配置器。 
*/							  
#if 0

#include <new>
#define _THROW_BAD_ALLOC throw bad_alloc

#elif !defined(_THROW_BAD_ALLOC)

#include <iostream>
#include <string>
#include <malloc.h>
#include <stdlib.h>
using namespace std;

#define _THROW_BAD_ALLOC cout << "out of memory" << endl;exit(1)

#endif
										   
//malloc-based allocator.通常比稍后介绍的default alloc速度慢
//注意无"template型别参数"， "非型别参数"inst完全没派上用场
template <int inst>
class __malloc_alloc_template
{
public:
	static void* allocate(size_t n)
	{
		void  *result = malloc(n); //第一级配置器直接使用malloc
		if (0 == result) result = oom_malloc(n);
		return result;
	}
	static void deallocate(void *p, size_t /* n */)
	{
		free(p); //第一级配置器直接使用free()
	}

	static void* reallocate(void *p, size_t /* old_sz */, size_t new_sz)
	{
		void *result = realloc(p, new_sz);	//第一级配置器直接使用realloc
		if (0 == result) result = oom_realloc(p, new_sz);
		return result;
	}

	//仿真C++的set_new_handler()，通过它可以指定自己的out-of-memory handler
	//本质上是一个返回值为函数指针的函数，这个函数指针指向一个返回值为空参数为函数指针的函数。
	static void(*set_malloc_handler(void(*f)()))()
	{
		void(*old)() = __malloc_alloc_oom_handler;
		__malloc_alloc_oom_handler = f;
		return(old);
	}

	
private:
	//用来处理内存不足的情况 oom: out of memory
	static void* oom_malloc(size_t);
	static void* oom_realloc(void *, size_t);
	static void(*__malloc_alloc_oom_handler)();//函数指针
};

//malloc_alloc out-of-memory handling
//初值为0，有待客端设定
template <int inst>
void (*__malloc_alloc_template<inst>::__malloc_alloc_oom_handler)() = 0;

template <int inst>
void* __malloc_alloc_template<inst>::oom_malloc(size_t n)
{
	void(*my_malloc_handler)(); //函数指针
	void *result;

	for (;;)		  //不断尝试释放、配置、再释放、再配置
	{
		my_malloc_handler = __malloc_alloc_oom_handler;
		if (0 == my_malloc_handler) { _THROW_BAD_ALLOC; }
		(*my_malloc_handler)(); //调用处理例程， 企图释放内存
		result = malloc(n);

		if (result) return result;
	}
}

template <int inst>
void* __malloc_alloc_template<inst>::oom_realloc(void *p, size_t n)
{
	void(*my_malloc_handler)(); //函数指针
	void *result;

	for (;;)		  //不断尝试释放、配置、再释放、再配置
	{
		my_malloc_handler = __malloc_alloc_oom_handler;
		if (0 == my_malloc_handler) { _THROW_BAD_ALLOC; }
		(*my_malloc_handler)(); //调用处理例程， 企图释放内存
		result = realloc(p, n);

		if (result) return result;
	}
}

//注意，以下直接将参数 inst 指定为0
typedef __malloc_alloc_template<0> malloc_alloc;

////////////////////////////////////////////////////////////////////////////////////////////
//第二级配置器
enum { __ALIGN = 8 };							//小型区块的上调边界
enum { __MAX_BYTES = 128 };						//小型区块的上限
enum { __NFREELISTS = __MAX_BYTES / __ALIGN };  //free-lists个数
	
//注意：无"template型别参数"，且第二参数完全没派上用场
//第一参数用于多线程环境下，本书不讨论多线程环境
template <bool threads, int inst>
class __default_alloc_template
{
private:
	//ROUND_UP()将bytes上调至8的倍数
	static size_t ROUND_UP(size_t bytes)
	{
		return ((bytes) + __ALIGN-1) & ~(__ALIGN-1);
	}

private:
	union obj		 //free-lists的节点构造
	{
		union obj *free_list_link;
		char client_data[1];  /*The client sees this.*/
	};

private:
	static obj* volatile free_list[__NFREELISTS];//16个free-lists
	
	//以下函数根据区块的大小，决定使用第n号free-list.n从0起算
	static size_t FREELIST_INDEX(size_t bytes)
	{
		return (((bytes) + __ALIGN - 1) / __ALIGN - 1);
	}

	//返回一个大小为n的对象， 并可能加入大小为n的其他区块到free list
	static void* refill(size_t n);	
	//配置一大块空间，可容纳nobjs个大小为"size"的区块
	//如果配置nobjs个区块有所不便，nobjs可能会降低
	static char* chunk_alloc(size_t size, int &nobjs);	  

	//Chunk allocation state
	static char *start_free; //内存池起始位置，只在chunk_alloc()中变化
	static char *end_free;	 //内存池结束位置，只在chunk_alloc()中变化
	static size_t heap_size;

public:
	static void* allocate(size_t n)
	{
		obj * volatile *my_free_list;
		obj * result;

		//大于128bytes就调用第一级配置器
		if (n > (size_t)__MAX_BYTES)
			return (malloc_alloc::allocate(n));

		//寻找16个free lists 中适当的一个
		my_free_list = free_list + FREELIST_INDEX(n);
		result = *my_free_list;												  
		if (result == 0)			//没找到可用的free list,准备重新填充free list
		{
			void *r = refill(ROUND_UP(n));
			return r;
		}

		//调整fress list
		*my_free_list = result->free_list_link;
		return result;
	}						
	static void deallocate(void *p, size_t n) 
	{
		obj *q = (obj*)p;
		obj * volatile *my_free_list;

		//大于128就调用第一级配置器
		if (n > (size_t)__MAX_BYTES)
		{
			malloc_alloc::deallocate(p, n);
			return;
		}
	  
		//寻找对应的free list
		my_free_list = free_list + FREELIST_INDEX(n);
		//调整free list, 回收区块
		q->free_list_link = *my_free_list;
		*my_free_list = q;
	}
	static void *realloc(void *p, size_t old_sz, size_t new_sz);
};

template <bool threads, int inst>
char * __default_alloc_template<threads, inst>::start_free = 0;

template <bool threads, int inst>
char * __default_alloc_template<threads, inst>::end_free = 0;

template <bool threads, int inst>
size_t __default_alloc_template<threads, inst>::heap_size = 0;

template <bool threads, int inst>
typename __default_alloc_template<threads, inst>::obj * volatile
__default_alloc_template<threads, inst>::free_list[__NFREELISTS] = 
{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};


//返回一个大小为n的对象，并且有时候会为适当的free list增加节点
//假设 n 已经适当上调至 8 的倍数
template <bool threads, int inst>
void* __default_alloc_template<threads, inst>::refill(size_t n)
{
	int nobjs = 20;
	//调用chunk_alloc(),尝试取得nobjs个区块作为free list的新节点
	//注意参数nobjs是pass  by reference
	char *chunk = chunk_alloc(n, nobjs);
	obj * volatile *my_free_list;
	obj *result;
	obj *current_obj, *next_obj;

	//如果只获得一个区块，则将此区块分配给调用者用，free list无新节点
	if (1 == nobjs) return (chunk);

	//否则调整free list, 纳入新节点 
	my_free_list = free_list + FREELIST_INDEX(n);

	//以下在chunk空间内配置free list
	result = (obj *)chunk;   //第一块返回给客端使用
	*my_free_list = next_obj = (obj *)(chunk + n);//以下引导free list指向新配置的空间(取自内存池)

	//以下将free list的各节点串接起来
	for (int i = 1;; i++)
	{
		current_obj = next_obj;
		next_obj = (obj *)((char *)next_obj + n);
		if (nobjs - 1 == i)
		{
			current_obj->free_list_link = 0;
			break;
		}
		else
		{
			current_obj->free_list_link = next_obj;
		}
	}

	return result;
}

template <bool threads, int inst>
char* __default_alloc_template<threads, inst>::chunk_alloc(size_t size, int &nobjs)
{
	char *result;
	size_t total_bytes = size * nobjs;
	size_t bytes_left = end_free - start_free; //内存池剩余空间

	if (bytes_left >= total_bytes)
	{
		//内存池剩余空间完全满足要求
		result = start_free;
		start_free += total_bytes;
		return (result);
	}
	else if (bytes_left >= size)
	{
		//内存池剩余空间不能满足需求量，但足够供应一个（含）以上的区块
		nobjs = bytes_left / size;
		total_bytes = size * nobjs;
		result = start_free;
		start_free += total_bytes;

		return (result);
	}
	else
	{
		//内存池剩余空间连一个区块的大小都无法提供
		size_t bytes_to_get = 2 * total_bytes + ROUND_UP(heap_size >> 4);

		//让内存池的残余零头还有些利用价值
		if (bytes_left > 0)
		{
			//内存池还有零头，先配给适当的free list
			//寻找适当的free list
			obj * volatile *my_free_list = free_list + FREELIST_INDEX(bytes_left);
			//调整free list, 将内存池中残余空间编入
			((obj *)start_free)->free_list_link = *my_free_list;
			*my_free_list = (obj *)start_free;
		}						  

		//配置 heap 空间，用来补充内存池
		start_free = (char *)malloc(bytes_to_get);
		if (0 == start_free)
		{
			//heap空间不足，malloc()失败
			int i;
			obj * volatile *my_free_list, *p;

			for (i = size; i <= __MAX_BYTES; i += __ALIGN)
			{
				my_free_list = free_list + FREELIST_INDEX(i);
				p = *my_free_list;
				if (0 != p)
				{
					*my_free_list = p->free_list_link;
					start_free = (char *)p;
					end_free = start_free + i;

					return (chunk_alloc(size, nobjs));
				}
			}

			end_free = 0;
			start_free = (char *)malloc_alloc::allocate(bytes_to_get);
		}
	
		heap_size += bytes_to_get;
		end_free = start_free + bytes_to_get;

		return (chunk_alloc(size, nobjs));	
	}
}

#endif