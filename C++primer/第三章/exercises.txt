3.1	对于using声明的使用，我们可以不必像书上一样用到一个就声明一个，直接using namespace std;就可以了。

3.2 每次读取一行(一换行符为标志)，直至文件尾。
	string line;
	while (getline(cin, line))
		cout << s << endl;
	每次读取一个单词，直至文件尾。
	string word;
	while (cin >> word)
		cout << word << endl;

3.3 	string类的输入运算符会忽略掉开头的空白字符并从第一个真正的字符开始直至遇到下一个空白字符结束。
	getline函数不会忽略开头的空白字符，遇到换行符结束读取操作，触发getline函数返回的换行符实际上被丢弃掉了，所以得到的string对象并不包含换行符。
		值得注意的是:和输入运算符一样，getline函数也会返回它的流参数，所以我们也能使用getline函数的结果作为判断的条件。

3.4		/*比较两个字符串是否相等，相等输出结果，不相等输出较大的字符串。*/
		#include <iostream>
		#include <string>
		using namespace std;

		int main()
		{
			string str1, str2;
			cin >> str1 >> str2;
			if (str1 == str2)
				cout << "str1 == str2" << endl;
			else
			{
				if (str1 > str2)
					cout << str1 << endl;
				else
					cout << str2 << endl;
			}

		    return 0;
		}

		/*比较两个字符串是否等长，如果不等长输出长度较大的字符串*/
		#include <iostream>
		#include <string>
		using namespace std;

		int j = 0;
		constexpr int i = 42;

		int main()
		{
			string str1, str2;
			cin >> str1 >> str2;
			if (str1.size() == str2.size())
				cout << "str1.size() == str2.size()" << endl;
			else
			{
				if (str1.size() > str2.size())
					cout << str1 << endl;
				else
					cout << str2 << endl;
			}

		    return 0;
		}
			
3.5 	/*从标准输入中读入多个字符串并将它们连接起来，输出连接起来的大字符串。*/
		#include <iostream>
		#include <string>
		using namespace std;

		int main()
		{
			string s, word;
			while (cin >> word)
				s += word;
			cout << s << endl;

			return 0;
		}//要将输入的多个字符串分隔开来，只需要将 s += word; 修改为 s += word + " ";

3.6 	/*使用范围for语句，将字符串内的所有字符用X代替。*/
		#include <iostream>
		#include <string>
		using namespace std;

		int main()
		{
			string str("chen teng");
			for (auto &c : str)
			{
				if (!isspace(c))
					c = 'X';
			}
			cout << str << endl;

			return 0;
		}

3.7	上题中使用auto关键字让编译器决定变量c的类型，其实就是char型，我们可以直接将变量c设置为char型，即修改代码auto &c : 			str -> char &c : str。

3.8	显而易见， for循环简洁明了。
	string str("chen teng");
	int i = 0;
	while (str[i] != '\0')
	{
		if (!isspace(str[i]))
			str[i] = 'X';
		i++;
	}

	string str("chen teng");
	for (auto &c : str)
	{
		if (!isspace(c))
		c = 'X';
	}

3.9 string s;//定义一个空串 长度为0
	cout << s[0] << endl; //error

3.10 	/*输入一个带标点符号的字符串，输出该字符串去除标点符号后的剩余部分*/
		#include <iostream>
		#include <string>
		using namespace std;

		int main()
		{
			string str;
			cin >> str;
			for (auto &c : str)
			{
				if (!ispunct(c))
					cout << c;
			}
			cout  << endl;
			return 0;
		}

3.11 contst string s = "keep out!";
	 for (auto &c : s) {/*...*/}
	 上面的语句不合法，s为const string类型字符串，不允许修改其内容。

3.12 a. vector<vector<int>> ivec;   //正确
	 b. vector<string> svec = ivec; //错误，svec和ivec类型不相同。
	 c. vector<string> svec(10, "null"); //正确

3.13 a. vector<int> v1; 		//包含0个元素
	 b. vector<int> v2(10); 	//包含10个元素，初始值均为0
	 c. vector<int> v3(10, 42); //包含10个元素，初始值均为42
	 d. vector<int> v4{10}; 	//包含1个元素，初始值为10
	 e. vector<int> v5{10, 42}; //包含2个元素，初始值分别为10，42
	 f. vector<string> v6{10};	//包含10个元素，初始值均为空串
	 g. vector<string> v7{10, "hi"}; //包含10个元素，初始值均为"hi"

3.14 	/*读入一组整数，并把它们保存至vector对象中*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			int num;
			vector<int> ivec;

			while (cin >> num)
				ivec.push_back(num);

			for (auto i : ivec)
				cout << i << " ";
			cout << endl;
			return 0;
		}

3.15	/*将上题的整型改为字符串类型*/
		#include <iostream>
		#include <vector>
		#include <string>
		using namespace std;

		int main()
		{
			string word;
			vector<string> svec;

			while (cin >> word)
				svec.push_back(word);

			for (auto str : svec)
				cout << str << " ";
			cout << endl;
			return 0;
		}

3.16 	/*以vector<int> ivec(10, 42)为例，将其容量和具体内容打印出来*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			vector<int> ivec(10, 42);

			cout << ivec.size() << endl;
			if (ivec.size() != 0)
			{
				for (auto i : ivec)
					cout << i << " ";
			}
			cout << endl;

			return 0;
		}

3.17 	/*从cin读入一组词并将它门存入一个vector对象，将所有词改写为大写形式，输出结果，每个词占一行*/
		#include <iostream>
		#include <vector>
		#include <string>
		using namespace std;

		int main()
		{
			string word;
			vector<string> svec;

			while (cin >> word)
				svec.push_back(word);

			if (!svec.empty())
			{
				for (auto str : svec)
				{
				 	/*
					//第一种方法
					for (auto &c : str)
						c = toupper(c);
					*/
					//第二种方法
					for (decltype(str.size()) i = 0; i < str.size(); i++) 
						str[i] = toupper(str[i]);						  
					cout << str << endl;
				}
			}

			return 0;
		}

3.18 vector<int> ivec;
     ivec[0] = 42;
     	上面的语句是不合法的，ivec是一个空的vector，其中不包括任何元素，所以不能通过下标去访问任何元素。正确的做法是通过
     push_back函数向vector中添加元素。vector对象(以及string)的下标运算符可用于访问已存在的元素，不能用于添加元素。

3.19 拥有十个元素的vector对象，所有值都是42，实现方法有：
	 a. vector<int> ivec(10, 42);
	 b. vector<int> ivec(42, 42, 42, 42, 42, 42, 42, 42, 42, 42);
	 c. vector<int> ivec = {42, 42, 42, 42, 42, 42, 42, 42, 42, 42};
	 还可以通过已知的vector对象来初始化ivec，个人觉得a方法好一些。

3.20 	/*读入一组整数保存至vector对象中，将每对相邻的整数的和输出*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			int num;
			vector<int> ivec;

			while (cin >> num)
				ivec.push_back(num);

			for (decltype(ivec.size()) i = 0; i < ivec.size()-1; i += 2)
				cout << ivec[i] + ivec[i + 1] << endl;

			if (ivec.size() % 2 != 0)
				cout << "总数为奇数，最后一个元素无法参与求和" << endl;
			return 0;
		}

		/*读入一组整数保存至vector对象中，先将首尾整数求和，再将倒数第二个和第二个元素求和，以此类推*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			int num;
			vector<int> ivec;

			while (cin >> num)
				ivec.push_back(num);


			for (decltype(ivec.size()) head = 0, end = ivec.size() - 1; head < end; head++, end--)
				cout << ivec[head] + ivec[end] << endl;

			if (ivec.size() % 2 != 0)
				cout << "总数为奇数，中间一个元素无法参与求和" << endl;
			return 0;
		}

3.21 	/*以vector<int> ivec(10, 42)为例，将其容量和具体内容打印出来*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			vector<int> ivec(10, 42);

			cout << ivec.size() << endl;
			for (auto it = ivec.begin(); it != ivec.end(); it++)
				cout << *it << ' ';

			cout << endl;
			return 0;
		}

3.22 	/*text为一个存放文本文件的字符串向量，其中的元素或者是一句话或者是一个用于表示段落分隔的空字符串。
		把text的第一段全部改为大写形式，然后输出。*/
		#include <iostream>
		#include <vector>
		#include <string>
		using namespace std;

		int main()
		{
			vector<string> text;
			string word;
			string strFir;

			while (getline(cin, word))
				text.push_back(word);

			for (auto itStr = text.begin(); itStr != text.end(); itStr++)
			{
				//将第一段的全部字母改为大写形式
				if (!itStr->empty())   
				{
					for (auto itChar = itStr->begin(); itChar != itStr->end(); itChar++)
					{
						if (isalpha(*itChar))
							*itChar = toupper(*itChar);
					}
				}
				else
					break;
			}

			for (auto it : text)
			{
				cout << it << ' ';
				//段与段之间隔一个空行
				if (it.empty())
					cout << endl << endl;;
			}
				
			cout << endl;
			return 0;
		}

3.23 	/*创建一个含有10个整数的vector对象，然后使用迭代器将所有元素的值都变成原来的两倍，并输出验证。*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			vector<int> ivec;
			int num;

			for (decltype(ivec.size()) i = 0; i < 10; i++)
			{
				cin >> num;
				ivec.push_back(num);
			}

			for (auto it = ivec.begin(); it != ivec.end(); it++)
				*it = 2 * (*it);

			for (auto i : ivec)
				cout << i << ' ';
			cout << endl;
			return 0;
		}

3.24 	/*读入一组整数保存至vector对象中，将每对相邻的整数的和输出*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			int num;
			vector<int> ivec;

			while (cin >> num)
				ivec.push_back(num);

			for (auto it = ivec.begin(); it < ivec.end() - 1; it += 2)
				cout << *it + *(it + 1) << endl;

			if (ivec.size() % 2 != 0)
				cout << "总数为奇数，最后一个元素无配对元素！" << endl;

			return 0;
		}
		/*读入一组整数保存至vector对象中，先将首尾整数求和，再将倒数第二个和第二个元素求和，以此类推*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			int num;
			vector<int> ivec;

			while (cin >> num)
				ivec.push_back(num);

			for (auto itFir = ivec.begin(), itEnd = ivec.end()-1; itFir < itEnd; itFir++, itEnd--)
				cout << *itFir + *itEnd << endl;

			if (ivec.size() % 2 != 0)
				cout << "总数为奇数，中间一个元素无配对元素！" << endl;

			return 0;
		}
		
3.25 	/*划分分数段：成绩取值在0~100， 以10分为一个分数段，要求统计各个分数段各有多少个成绩。*/
		#include <iostream>
		#include <vector>
		using namespace std;

		int main()
		{
			//0~9、10~19、 20~29、 30~39、 40~49、 50~59、 60~69、 70~79、 80~89、 90~99、 100
			vector<unsigned> scores(11, 0); //十一个分数段，全部初始化为0
			unsigned grade;

			auto it = scores.begin()；
			while (cin >> grade)
			{
				if (grade <= 100)           //只处理有效输入
				{
					 auto n = grade / 10;
					 vector<unsigned>::iterator itPre  = it + n;
					 (*itPre)++;					
				}
			}

			for (auto num : scores)
				cout << num << " ";

			cout << endl;
			return 0;
		}

3.26 	/*二分搜索：从有序序列中寻找某个特定的值。从序列的中间位置开始搜索，如果正好是要找的元素，搜索完成；如果不是，假如该元素小于要找的元素，则在序列的后半部分继续搜索；如果该元素大于要找的元素，则在序列的前半部分中继续搜索*/
